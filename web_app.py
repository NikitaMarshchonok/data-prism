import os
import shutil
from flask import Flask, request, redirect, url_for, send_from_directory, render_template
from src.data_loader import load_data
from src.data_analyzer import (
    analyze_data,
    analyze_missing_values,
    plot_correlation_heatmap,
    detect_categorical_columns,
    analyze_categorical_column,
    describe_column_types,
    generate_description_for_column,
    detect_time_columns,
    convert_time_columns
)
from src.visualizer import plot_histogram_interactive, plot_time_trend
from src.report_generator import generate_report
from src.pdf_exporter import export_report_to_pdf
from markupsafe import Markup
import markdown as md

# üìÅ –ü—É—Ç–∏
UPLOAD_FOLDER = 'data/uploads'
REPORT_FOLDER = 'reports'
IMAGE_FOLDER = 'images'
HTML_REPORT = os.path.join(REPORT_FOLDER, 'final_report.html')
PDF_REPORT = os.path.join(REPORT_FOLDER, 'final_report.pdf')

# ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(REPORT_FOLDER, exist_ok=True)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


@app.template_filter("markdown")
def markdown_filter(text):
    return Markup(md.markdown(text))


@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        if 'datafile' not in request.files:
            return '–ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!'
        file = request.files['datafile']
        if file.filename == '':
            return '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!'
        if file:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
            file.save(file_path)

            # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            shutil.copy(file_path, os.path.join(app.config['UPLOAD_FOLDER'], 'latest_uploaded.csv'))

            data, _ = load_data(file_path)
            if data is None:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö'

            # ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            data, detected_time_cols = convert_time_columns(data)
            if detected_time_cols:
                print(f"üïí –ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(detected_time_cols)}")

            # üìä –ê–Ω–∞–ª–∏–∑
            stats, numeric_cols = analyze_data(data)
            missing_data = analyze_missing_values(data)
            column_overview = describe_column_types(data)
            corr_chart = plot_correlation_heatmap(data) if len(numeric_cols) >= 2 else None

            interactive_charts = {}
            column_descriptions = {}
            for col in numeric_cols:
                interactive_charts[col] = plot_histogram_interactive(data, col)
                column_descriptions[col] = generate_description_for_column(data, col)

            categorical_summaries = {}
            for col in detect_categorical_columns(data):
                table_data, chart_html = analyze_categorical_column(data, col)
                categorical_summaries[col] = {
                    'table': table_data,
                    'chart': chart_html
                }

            time_trends = {}
            for col in detect_time_columns(data):
                trend_chart = plot_time_trend(data, col)
                if trend_chart:
                    time_trends[col] = trend_chart

            # üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
            generate_report(
                stats=stats,
                interactive_charts=interactive_charts,
                missing_data=missing_data,
                corr_chart=corr_chart,
                categorical_data=categorical_summaries,
                column_overview=column_overview,
                column_descriptions=column_descriptions,
                time_trends=time_trends,
                output_file=HTML_REPORT
            )

            return redirect(url_for('show_report', filename='final_report.html'))

    # üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
    return '''
    <!doctype html>
    <html lang="ru">
    <head><meta charset="UTF-8"><title>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</title></head>
    <body>
        <h1>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</h1>
        <form method="post" enctype="multipart/form-data">
            <input type="file" name="datafile">
            <input type="submit" value="–ó–∞–≥—Ä—É–∑–∏—Ç—å">
        </form>
    </body>
    </html>
    '''


@app.route('/reports/<filename>')
def show_report(filename):
    return send_from_directory(REPORT_FOLDER, filename)


@app.route('/reports/<path:filename>')
def download_file(filename):
    return send_from_directory(REPORT_FOLDER, filename)


# ‚úÖ –ú–∞—Ä—à—Ä—É—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≤—Ä—É—á–Ω—É—é
@app.route('/download-pdf')
def download_pdf():
    if not os.path.exists(HTML_REPORT):
        return '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ HTML-–æ—Ç—á—ë—Ç!'

    try:
        export_report_to_pdf(HTML_REPORT, PDF_REPORT)
        print("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é.")
        return send_from_directory(REPORT_FOLDER, 'final_report.pdf', as_attachment=True)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}"


# ‚úÖ –ú–∞—Ä—à—Ä—É—Ç: BI-–¥—ç—à–±–æ—Ä–¥
@app.route('/dashboard')
def show_dashboard():
    from src.dashboard_generator import generate_dashboard_data

    try:
        kpis, top_charts, tables, summary, sparklines, ai_summary = generate_dashboard_data()

        return render_template(
            'dashboard.html',
            kpis=kpis,
            top_charts=top_charts,
            tables=tables,
            summary=summary,
            sparklines=sparklines,
            ai_summary=ai_summary
        )
    except Exception as e:
        return f"<h2>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞:</h2><pre>{e}</pre>"



if __name__ == '__main__':
    app.run(debug=True)
