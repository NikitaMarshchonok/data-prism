import pandas as pd

def generate_dynamic_kpis(df):
    kpis = {}  # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

    # üì¶ –û–±—â–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
    total_cells = df.shape[0] * df.shape[1]
    missing_total = df.isnull().sum().sum()
    if total_cells > 0:
        percent_filled = 100 * (1 - missing_total / total_cells)
        kpis["üì¶ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"] = f"{percent_filled:.1f}%"

    # üß¨ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∏ üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if not df.empty:
        first_col = df.columns[0]
        kpis["üß¨ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞"] = first_col

        non_null_count = df[first_col].notnull().sum()
        unique_count = df[first_col].nunique()
        uniqueness_percent = 100 * unique_count / non_null_count if non_null_count > 0 else 0
        kpis["üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å"] = f"{uniqueness_percent:.1f}"
    else:
        kpis["üß¨ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞"] = "N/A"
        kpis["üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å"] = "0.0"

    # üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
    for col in df.columns:
        col_lower = col.lower()
        col_data = df[col]

        # üí∏ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞/—Å—É–º–º–∞/—Å—Ç–æ–∏–º–æ—Å—Ç—å
        if any(word in col_lower for word in ['price', 'amount', 'sum', 'value', 'cost']):
            if pd.api.types.is_numeric_dtype(col_data):
                kpis["üí∏ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"] = f"{col_data.mean():,.2f}"

        # ‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞
        if any(word in col_lower for word in ['score', 'rating']):
            if pd.api.types.is_numeric_dtype(col_data):
                kpis["‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"] = f"{col_data.mean():.2f}"

        # üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ / ID
        if any(word in col_lower for word in ['user', 'id', 'uid']):
            kpis["üß† –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID"] = str(col_data.nunique())

        # üìÜ –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if any(word in col_lower for word in ['date', 'time', 'timestamp']):
            try:
                converted = pd.to_datetime(col_data, errors='coerce')
                if converted.notnull().sum() > 0:
                    first = converted.min().strftime("%Y-%m-%d")
                    last = converted.max().strftime("%Y-%m-%d")
                    kpis["‚è± –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"] = f"{first} ‚Üí {last}"
            except Exception:
                pass

    return kpis
