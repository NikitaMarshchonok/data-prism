# src/visualizer.py
# src/visualizer.py
import os
import matplotlib
import pandas as pd
matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—ç–∫–µ–Ω–¥
import matplotlib.pyplot as plt
import seaborn as sns

# src/visualizer.py
import plotly.express as px

# src/visualizer.py
import plotly.express as px

import plotly.express as px


def plot_histogram_interactive(data, column):
    nbins = min(10, len(data[column].unique()))

    fig = px.histogram(
        data,
        x=column,
        nbins=nbins,
        marginal="box",
        title=f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {column}",
        template="plotly_white",
        color_discrete_sequence=["#5470C6"]  # –ü—Ä–∏—è—Ç–Ω—ã–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
    )

    fig.update_layout(
        title_font_size=20,
        xaxis_title=f"{column} (–∑–Ω–∞—á–µ–Ω–∏—è)",  # –ø–µ—Ä–µ–≤–æ–¥ –æ—Å–∏ X
        yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",  # –ø–µ—Ä–µ–≤–æ–¥ –æ—Å–∏ Y
        bargap=0.05,
        height=450
    )

    return fig.to_html(full_html=False, include_plotlyjs='cdn')


def plot_histogram(data, column, output_path):
    """
    –°—Ç—Ä–æ–∏—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –∫—Ä–∏–≤–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    :param column: –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    :param output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    plt.figure(figsize=(8, 4))
    sns.histplot(data[column].dropna(), kde=True)
    plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {column}')
    plt.xlabel(column)
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.savefig(output_path)
    plt.close()
    print(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ {column} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")


import plotly.express as px


def plot_time_trend(df, time_col, value_col=None):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ.
    –ï—Å–ª–∏ value_col –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî —Å—Ç—Ä–æ–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    if time_col not in df.columns:
        return None

    df_copy = df.copy()
    series = df_copy[time_col].dropna()

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "–≥–æ–¥"
    if pd.api.types.is_numeric_dtype(series) and series.max() < 2100:
        df_copy[time_col] = series.astype(int)
        kind = "year"
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ datetime
        try:
            df_copy[time_col] = pd.to_datetime(series, errors='coerce')
            kind = "datetime"
        except Exception:
            return None

    if value_col:
        grouped = df_copy.groupby(time_col)[value_col].mean().reset_index()
        fig = px.line(grouped, x=time_col, y=value_col,
                      title=f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {value_col} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ({time_col})")
    else:
        grouped = df_copy[time_col].value_counts().sort_index().reset_index()
        grouped.columns = [time_col, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        fig = px.bar(grouped, x=time_col, y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                     title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ {time_col}")

    fig.update_layout(template="simple_white", height=400)
    return fig.to_html(full_html=False, include_plotlyjs='cdn')
