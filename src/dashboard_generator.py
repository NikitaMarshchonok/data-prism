import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from src.data_loader import load_data
from src.kpi_generator import generate_dynamic_kpis  # ‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ KPI
import plotly.figure_factory as ff
from pandas.api.types import is_numeric_dtype
from src.ai_summary import generate_ai_summary_openai


import os
from dotenv import load_dotenv
import openai


load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")


def generate_summary(df):
    summary_lines = []

    # üßæ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    summary_lines.append(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df):,}")
    summary_lines.append(f"–ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")

    # üìâ –ü—Ä–æ–ø—É—Å–∫–∏
    missing_cols = df.columns[df.isnull().any()].tolist()
    if missing_cols:
        summary_lines.append(f"–ö–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {', '.join(missing_cols)}")
    else:
        summary_lines.append("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç.")

    # üßÆ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    type_counts = df.dtypes.value_counts()
    summary_lines.append("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: " + ", ".join([f"{t}: {c}" for t, c in type_counts.items()]))

    # üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    cat_cols = [col for col in df.columns if df[col].nunique() <= 20 and df[col].dtype == 'object']
    for col in cat_cols[:3]:
        summary_lines.append(f"–ö–æ–ª–æ–Ω–∫–∞ '{col}' —Å–æ–¥–µ—Ä–∂–∏—Ç {df[col].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {', '.join(map(str, df[col].dropna().unique()[:5])) + ('...' if df[col].nunique() > 5 else '')}")

    return "<br>".join(summary_lines)

def generate_missing_comment(df):
    missing = df.isnull().sum()
    missing = missing[missing > 0].sort_values(ascending=False)

    if missing.empty:
        return "‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    top_col = missing.idxmax()
    top_pct = (missing.max() / len(df)) * 100
    total_cols = missing.shape[0]

    return f"üîç –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ‚Äî –≤ –∫–æ–ª–æ–Ω–∫–µ '{top_col}' ({top_pct:.1f}%). –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: {total_cols}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫."



def generate_chart_comment(df, col, chart_type):
    if chart_type == "hist":
        desc = df[col].describe()
        return f"üìä {col}: –º–µ–¥–∏–∞–Ω–∞ ‚Äî {df[col].median():.1f}, min ‚Äî {desc['min']:.1f}, max ‚Äî {desc['max']:.1f}"

    elif chart_type == "cat":
        top_val = df[col].value_counts().idxmax()
        top_count = df[col].value_counts().max()
        total = df[col].count()
        percent = top_count / total * 100
        return f"üî¢ –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî '{top_val}' ({percent:.1f}%)"

    elif chart_type == "trend":
        return f"üìâ –ó–Ω–∞—á–µ–Ω–∏—è {col} —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º ‚Äî {df[col].min():.1f} ‚Üí {df[col].max():.1f}"

    else:
        return "‚ÑπÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."


def generate_sparklines(df):
    from plotly.offline import plot
    import plotly.graph_objects as go

    sparklines = {}
    numeric_cols = df.select_dtypes(include='number').columns

    for col in numeric_cols[:3]:  # –∏–ª–∏ [:5], –∫–∞–∫ —Ö–æ—á–µ—à—å
        values = df[col].dropna().tolist()
        if len(values) < 5:
            continue

        fig = go.Figure()
        fig.add_trace(go.Scatter(
            y=values,
            mode='lines',
            line=dict(color='rgba(0, 200, 255, 0.8)', width=1.8),
            hoverinfo='skip'
        ))

        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            height=45,
            width=120,
            paper_bgcolor='rgba(0,0,0,0)',  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False),
            yaxis=dict(visible=False)
        )

        # üí° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–∫–æ–¥ –±–µ–∑ plotly.js –∏ –±–µ–∑ div wrapper'–∞
        sparkline_html = plot(fig, output_type='div', include_plotlyjs=False)

        # –£–¥–∞–ª–∏–º —Ñ–æ–Ω–æ–≤—É—é —Ä–∞–º–∫—É —á–µ—Ä–µ–∑ style inline (–µ—â—ë –∑–∞—â–∏—Ç–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        sparkline_html = sparkline_html.replace(
            'class="plot-container"',
            'class="plot-container" style="background:none !important;"'
        )

        sparklines[col] = sparkline_html

    return sparklines


def generate_dashboard_data():
    latest_file = 'data/uploads/latest_uploaded.csv'
    df, _ = load_data(latest_file)
    if df is None:
        return {}, [], [], ""



    kpis = {
        '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': f"{df.shape[0]:,}",
        '–ö–æ–ª-–≤–æ –∫–æ–ª–æ–Ω–æ–∫': str(df.shape[1]),
        '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π': str(df.isnull().sum().sum())
    }

    custom_kpis = generate_dynamic_kpis(df)


    # üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–æ–≤ (sparklines) –∏ KPI –ø–æ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
    sparklines = {}
    numeric_cols = df.select_dtypes(include='number').columns
    for col in numeric_cols[:3]:
        values = df[col].dropna().tolist()
        if len(values) < 5:
            continue

        # –î–æ–±–∞–≤–∏–º KPI (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        kpis[col] = f"{df[col].mean():.1f}"

        # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            y=values,
            mode='lines',
            line=dict(color='rgba(0, 200, 255, 0.8)', width=2),
            hoverinfo='skip'
        ))
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            height=50,
            width=150,
            paper_bgcolor='#131c2c',
            plot_bgcolor='#131c2c',
            xaxis=dict(visible=False),
            yaxis=dict(visible=False)
        )
        sparklines[col] = fig.to_html(full_html=False, include_plotlyjs=False)


    fill_percent = custom_kpis.pop('üì¶ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', None)
    unique_percent = custom_kpis.pop('üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å', None)
    first_col_name = custom_kpis.pop('üß¨ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞', None)

    kpis.update(custom_kpis)

    top_charts = []
    numeric_cols = df.select_dtypes(include='number').columns

    # üìà –¢–æ–ø-3 –∫–æ–ª–æ–Ω–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π
    if len(numeric_cols) >= 3:
        variances = df[numeric_cols].var().sort_values(ascending=False)
        top3 = variances.head(3)
        top_dispersion = ', '.join([f"{col} ({var:.1f})" for col, var in top3.items()])
        kpis['üìà –¢–æ–ø-–¥–∏—Å–ø–µ—Ä—Å–∏—è'] = top_dispersion

    # üîπ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    for col in numeric_cols[:2]:
        fig = px.histogram(df, x=col, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}")
        fig.update_layout(
            plot_bgcolor='#131c2c',
            paper_bgcolor='#131c2c',
            font=dict(color='white'),
            bargap=0.2,
            margin=dict(t=40, b=30, l=0, r=0)
        )
        fig.update_traces(
            marker_color='rgba(0, 200, 255, 0.7)',
            marker_line_color='rgba(0, 200, 255, 1)',
            marker_line_width=1.5,
            hovertemplate='–ó–Ω–∞—á–µ–Ω–∏–µ: %{x}<br>–ß–∞—Å—Ç–æ—Ç–∞: %{y}<extra></extra>'
        )
        comment = generate_chart_comment(df, col, "hist")
        top_charts.append({
            'title': f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}',
            'html': fig.to_html(full_html=False),
            'comment': comment
        })

    # üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∏–ª–µ–º
    cat_cols = df.select_dtypes(include='object').columns
    filtered_cats = [col for col in cat_cols if df[col].nunique() <= 20]
    for col in filtered_cats[:2]:
        top_values = df[col].value_counts().reset_index()
        top_values.columns = [col, 'count']
        fig = px.bar(top_values, x=col, y='count', title=f'–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {col}')
        fig.update_layout(
            plot_bgcolor='#131c2c',
            paper_bgcolor='#131c2c',
            font=dict(color='white'),
            margin=dict(t=40, b=30, l=0, r=0),
            xaxis_tickangle=-45
        )
        fig.update_traces(
            marker_color='rgba(255, 99, 132, 0.7)',
            marker_line_color='rgba(255, 99, 132, 1)',
            marker_line_width=1.5,
            hovertemplate='–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %{x}<br>–ß–∞—Å—Ç–æ—Ç–∞: %{y}<extra></extra>'
        )
        comment = generate_chart_comment(df, col, "cat")
        top_charts.append({
            'title': f'–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {col}',
            'html': fig.to_html(full_html=False),
            'comment': comment
        })

    # ‚úÖ –í—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –û–î–ò–ù
    if len(numeric_cols) >= 2:
        corr_matrix = df[numeric_cols].corr().round(2)
        fig = ff.create_annotated_heatmap(
            z=corr_matrix.values,
            x=list(corr_matrix.columns),
            y=list(corr_matrix.index),
            annotation_text=corr_matrix.values,
            colorscale='Tealrose',
            showscale=True
        )
        fig.update_layout(
            title='üìä –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
            font=dict(color='white'),
            paper_bgcolor='#131c2c',
            plot_bgcolor='#131c2c',
            margin=dict(t=40, b=30, l=0, r=0)
        )
        top_charts.append({
            'title': 'üìä –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
            'html': fig.to_html(full_html=False),
            'comment': 'üîó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏'
        })


    # üîπ –¢—Ä–µ–Ω–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–æ
    time_cols = []
    for col in df.columns:
        if df[col].dtype == 'object' or 'date' in col.lower() or 'time' in col.lower():
            converted = pd.to_datetime(df[col], errors='coerce')
            if converted.notnull().sum() / len(df) > 0.5 and converted.nunique() > 3:
                time_cols.append(col)

    for time_col in time_cols[:1]:
        df['_time'] = pd.to_datetime(df[time_col], errors='coerce')
        for num_col in numeric_cols[:2]:
            fig = px.scatter(df, x='_time', y=num_col, title=f"üìâ –¢—Ä–µ–Ω–¥ –ø–æ –¥–∞—Ç–µ: {num_col}")
            fig.update_layout(
                plot_bgcolor='#131c2c',
                paper_bgcolor='#131c2c',
                font=dict(color='white'),
                margin=dict(t=40, b=30, l=0, r=0)
            )
            fig.update_traces(
                marker=dict(
                    color='rgba(0, 255, 180, 0.6)',
                    size=6,
                    line=dict(width=1, color='rgba(0, 255, 180, 1)')
                ),
                hovertemplate='–î–∞—Ç–∞: %{x}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{y}<extra></extra>'
            )
            comment = generate_chart_comment(df, num_col, "trend")
            top_charts.append({
                'title': f'üìâ –¢—Ä–µ–Ω–¥ –ø–æ –¥–∞—Ç–µ: {num_col}',
                'html': fig.to_html(full_html=False),
                'comment': comment
            })


    def create_gauge(title, percent):
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=percent,
            title={'text': title, 'font': {'size': 18, 'color': 'white'}},
            number={'suffix': "%", 'font': {'color': 'white'}},
            gauge={
                'shape': "angular",
                'axis': {
                    'range': [0, 100],
                    'tickmode': 'linear',
                    'tick0': 0,
                    'dtick': 20,
                    'tickcolor': '#cccccc',
                    'tickfont': {'color': '#cccccc'}
                },
                'bar': {'color': "rgba(0, 168, 255, 0.6)"},
                'bgcolor': "#131c2c",
                'bordercolor': "#131c2c",
                'steps': [
                    {'range': [0, 50], 'color': '#7f1d1d'},  # —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                    {'range': [50, 75], 'color': '#78350f'},  # –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
                    {'range': [75, 100], 'color': '#065f46'}  # —Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π
                ],
                'threshold': {
                    'line': {'color': "#ffffff", 'width': 3},
                    'thickness': 0.75,
                    'value': percent
                }
            }
        ))
        fig.update_layout(
            paper_bgcolor='#131c2c',  # –æ–±—â–∏–π —Ñ–æ–Ω
            plot_bgcolor='#131c2c',
            margin=dict(t=40, b=40, l=20, r=20),  # ‚¨ÖÔ∏è –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø (b=40)
            height=270  # ‚¨ÜÔ∏è –ß—É—Ç—å –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞ (–¥–ª—è —à–∫–∞–ª—ã —Å–Ω–∏–∑—É)
        )
        return fig.to_html(full_html=False)

    if fill_percent:
        try:
            percent = float(fill_percent.replace('%', '').replace(',', '.'))
            top_charts.insert(0, {
                'title': 'üì¶ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö',
                'html': create_gauge("üì¶ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", percent)
            })
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {e}")

    if unique_percent and first_col_name:
        try:
            percent = float(unique_percent.replace('%', '').replace(',', '.'))
            top_charts.insert(1, {
                'title': f'üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π: {first_col_name}',
                'html': create_gauge(f"üîÅ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {first_col_name}", percent)
            })
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {e}")

    table1 = {
        'title': 'üîç –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
        'headers': list(df.columns),
        'rows': df.head(5).values.tolist()
    }

    table2 = {
        'title': 'üìå –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫',
        'headers': ['–ö–æ–ª–æ–Ω–∫–∞', '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö'],
        'rows': [[col, str(dtype)] for col, dtype in df.dtypes.items()]
    }

    missing = df.isnull().sum()
    missing = missing[missing > 0]
    if not missing.empty:
        total = len(df)
        table3 = {
            'title': 'üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º',
            'headers': ['–ö–æ–ª–æ–Ω–∫–∞', '–ü—Ä–æ–ø—É—â–µ–Ω–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç'],
            'rows': [
                [col, int(missing[col]), f"{(missing[col]/total*100):.1f}%"]
                for col in missing.index
            ],
            'comment': generate_missing_comment(df)
        }
    else:
        table3 = {
            'title': 'üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            'headers': ['‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!'],
            'rows': [],
            'comment': generate_missing_comment(df)
        }

    tables = [table1, table2, table3]

    # üìâ –¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ IQR
    outlier_rows = []
    for col in numeric_cols:
        q1 = df[col].quantile(0.25)
        q3 = df[col].quantile(0.75)
        iqr = q3 - q1
        lower = q1 - 1.5 * iqr
        upper = q3 + 1.5 * iqr
        outliers = df[(df[col] < lower) | (df[col] > upper)]
        count = outliers.shape[0]
        if count > 0:
            percent = count / df.shape[0] * 100
            outlier_rows.append([col, count, f"{percent:.1f}%"])

    if outlier_rows:
        table4 = {
            'title': 'üìâ –í—ã–±—Ä–æ—Å—ã –ø–æ IQR',
            'headers': ['–ö–æ–ª–æ–Ω–∫–∞', '–ö–æ–ª-–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤', '% –≤—ã–±—Ä–æ—Å–æ–≤'],
            'rows': outlier_rows
        }
        tables.append(table4)

    summary = generate_summary(df)
    # üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI Summary
    ai_summary = generate_ai_summary_openai(df)



    return kpis, top_charts, tables, summary, sparklines, ai_summary


